src/
    |_index.js



COMPONENTES : 

1- Todos los componentes son funciones
2- Todos los componentes arracan en mayuscula
3- Todos los componentes tienen que retornar un elemento
4- Todos los componentes pueden recibir N cantidad props de cualquier valor
5- Todos los componentes pueden tener estado y ciclo de vida
6- No tienen ciclo de vida real sino que son funciones que se vuelven a ejecutar por completo si :
    - se modifica el estado
    - se reciben nuevas props
    - reinicia su padre
    - se modifica el contexto


CLASS : props + state + lifecycle
HOOK : Gancho - Son funciones que adaptan un componente funcional a que tenga funcionalidades que antes no tenia


- useState
- useEffect



STATE : Son variables que viven adentro de un componente que cuando se modifican React lo vuelve a renderizar


function App () {
    const 
}






class App {


    constructor(){}

    render(){}

    componentDidMount(){}

    componentDidUpdate(){}

    shouldComponentUpdate(){}

    componentWillUnmount(){}

}





JSX : JS and XML

function Componente(){}

const Componente = () => {}

class Componente {}



Componente()   =  <Componente id=""/>
Componente()   =  <Componente> </Componente>




.  = La misma carpeta donde estas parado vos archivo
.. = Subi una carpeta desde donde estas parado vos archivo





/src
    |_index.js
        |_componentes/
            |_App.js
                |_Header.js
                    |_NavBar.js
                        |_CarWidget.js
                |_ItemListContainer.js


BEM 




function foo(saludo){
    console.log(saludo)
}

foo("Hola",1,2,3)



function Foo(){

}

<Foo nombre="horacio" />


PROPS : Son las propiedades que le pasamos a un componente como los parametros de una funcion en JS vanilla. Son de SOLO LECTURA. 






function foo(){
    let a = 1
    console.log(a)
}

foo()
foo()


$.ajax().then().catch()

fetch().then().catch()

otraFuncionRandom().then().catch()

leerElCache().then().catch()



AJAX : Async Javascript and XML

XHR (XMLHttpRequest) : XMLHttpRequest es una clase de objeto que nos permite hacer peticiones a un servidor usando el protocolo HTTP
CALLBACK OF HELL / Pyramid of doom :  

const usuarios = hacerPedido((usuarios)=>{
    const posteos = hacerPedido((posteos)=>{
        const comentarios = hacerPedido((comentarios)=>{
            console.log(usuarios,posteos,comentarios)
        })
    })
})

$.ajax() : Es la implementacion de jquery para XHR

FETCH : Es la nueva implementacion de XHR + Promise


FTP / TCP - IP / HTTPS / SSH / SMTP / POP / IMAP
HTTP : HyperText Transfer Protocol

AXIOS : https://www.npmjs.com/package/axios - Es una libreria que nos permite hacer peticiones a un servidor usando el protocolo HTTP (el nuevo ajax)




CLIENTE / REQUEST

IP / URL   -  METODO / VERBO (get - post - put - patch - delete , etc...)
HEADERS
    
    Accept : un header que te sirve para configurar el tipo de contenido que quieres que te devuelva el servidor


BODY / PAYLOAD : Es el cuerpo de la peticion que se envia al servidor




SERVIDOR / RESPONSE 

CODIGO -  MENSAJE

1XX : Informacion

2XX : Exito
200 - 201 - 

3XX : Redireccion
302 - 304

4XX : Error Cliente
404 - 400 - 403 - 401 - 405 

5XX : Error Servidor
500 - 

HEADERS 
    Content-Type : Es el tipo de contenido que esta enviando el servidor
    Content-Length : Es el tamaÃ±o del contenido que esta enviando el servidor en bytes
BODY 
    Es el cuerpo de la respuesta que nos devuelve el servidor


CORS : Cross Origin Resource Sharing
access-control-allow-origin : *



    fetch("http://jsonplaceholder.typicode.com/users")

    .then((respuesta)=>{
        console.log("Salio bien")
        console.log(respuesta)
        
        const descarga = respuesta.json()
        return descarga
    })
    .then((respuesta)=>{
        console.log("Ultimo")
        retunr otra promesa
    })
    .then(()=>{

    })
    .catch((error)=>{
        console.log("Salio mal")
        console.log(error)
    })


    console.log("Test")




ASYNC / AWAIT : Es una forma de hacer peticiones asincronas en JS

funcfion async foo(){

     try {
        const respuesta = await fetch("http://jsonplaceholder.typicode.com/users")
        const usuarios = await respuesta.json()
        console.log(usuarios)
     } catch (error) {
         console.log(error)
     }

}



FUNCIONES GENERADORAS 

function foo * () {
    codigo1
    codigo2
    yield() ;
    codigo3
    codigo4
    yield;
}


foo.next(1)
foo.next()

redux-saga


caches.open("")




BrowserRouter : DOM (History API)
HashRouter : URL (Location API)
StaticRouter : SSR (Servidor Back End)
MemoryRouter
NativeRouter



src/
    |_index.js
    |_ui/
        |_layout/
            |_App.js
            |_Header.js
            |_NavBar.js
            |_Main.js
            |_Footer.js
        |_pages/
            |_ItemListContainer.js
            |_ItemDetailContainer.js
            |_Carrito.js
        |_widgets
            |_CarWidget.js
    |_api/
        |_Providers.js
        |_Contexto.js
        |_Redux.js

src/
    |_App/
        |_App.js
        |_App.css
    |_Header/
        |_Header.js
        |_Header.css
    |_ItemListContainer/
        |_ItemListContainer.js
        |_ItemList.js
        |_Item.js
        |_ItemListContainer.css


Dynamic Imports : Es una forma de importar componentes dinamicamente



fetch => Promise
fetch() => Reponse
Reponse => Response.json()
Response.json() => Promise

promesa suelta : no esta adentro de un .then
promesa adentro de un .then : la retornas y continuas con un .then abajo del .then anterior
muchas promesas adentro de un .then : las retornas adentro de un Promise.all() y continuas con un .then abajo del .then anterior


const arr = [1,2,3,4,5]

arr.filter((item)=>{
    //return true si pasa tu filtro y false si no pasa
    if(item>2){
        return true
    }else{
        return false
    }
})